FROM {{ services['cli']['image'] }}

ENV DEBIAN_FRONTEND=noninteractive
#Установка базовых програмнных пакетов и начальная настройка системы
RUN apt-get update
RUN apt-get install -y --allow-unauthenticated apt-transport-https apt-utils procps iproute2 curl bash-completion git inetutils-ping locales mc nano sudo tzdata wget libcurl4-openssl-dev
RUN ln -fs /usr/share/zoneinfo/Europe/Moscow /etc/localtime
RUN dpkg-reconfigure -f noninteractive tzdata
RUN locale-gen ru_RU.UTF-8
RUN locale-gen en_US.UTF-8

#Создание идентичного пользователя из-под которого запущен плейбук
RUN if [ $(getent group {{ ansible_user_gid }}) ]; then groupmod -n {{ ansible_user }} -g {{ ansible_user_gid }} $(getent group {{ ansible_user_gid }}|cut -d ":" -f1); \
    else groupadd --gid {{ ansible_user_gid }} {{ ansible_user }}; fi
RUN dirname {{ home_dir }} | xargs mkdir -p
RUN if [ $(getent passwd {{ ansible_user_uid }}) ]; then usermod -d {{ home_dir }} -s /bin/bash -l {{ ansible_user }} -u  {{ ansible_user_uid }} -g  {{ ansible_user_gid }} $(getent passwd {{ ansible_user_uid }}|cut -d ":" -f1); mkhomedir_helper {{ ansible_user }}; \
    else useradd -m --home {{ home_dir }} -s /bin/bash {{ ansible_user }} --uid  {{ ansible_user_uid }} --gid  {{ ansible_user_gid }}; fi
RUN echo "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/{{ ansible_user | regex_replace('\.','')}}

{% if project_name in [ 'localenv-dev' ] %}
RUN if [ $(getent group {{ docker_gid }}) ]; then groupmod -n docker -g {{ docker_gid }} $(getent group {{ docker_gid }}|cut -d ":" -f1); \
    else groupadd --gid {{ docker_gid }} docker; fi
RUN usermod -aG docker {{ ansible_user }}
RUN apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common
RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
RUN add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
RUN apt-get update
RUN apt-get install -y docker-ce-cli
RUN pip install ansible docker-compose
{% endif %}

#Настройка пользователя и выставление нужных разрешений
COPY ./bashrc /bashrc
RUN cat /bashrc >> {{ home_dir }}/.bashrc
RUN rm /bashrc

RUN mkdir -p /var/www
RUN chown -R {{ ansible_user }}:root /var/run/ /var/log/ /opt
RUN chown -R {{ ansible_user }}:{{ ansible_user }} {{ home_dir }} /var/www

{% if 'workers' in services %}
RUN apt-get install -y supervisor
chown {{ ansible_user }}:root /dev/{stdout,stderr} /etc/supervisor/supervisord.conf /opt/run /run
{% endif %}

{% if tech == 'php' %}
#Секция для технологии: php
#задаем переменные для работы xdebug
ENV XDEBUG_CONFIG remote_host=host.docker.internal remote_enable=1
ENV PHP_IDE_CONFIG serverName={{ repo_name }}.{{ project }}.{{ tld_default }}

RUN mkdir -p /run/php/
RUN chown -R {{ ansible_user }}:root /run/php/
#Устанавливаем компосер, необходимые php модули и их зависимости
{% if services['cli']['image']|regex_replace (':.*','') == 'php' %}
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

RUN apt-get install -y {% for deps in php_modules_deps|intersect(php_modules) %}{{ php_modules_deps[deps]|join(' ') }} {% endfor %}

RUN pecl config-set php_ini "${PHP_INI_DIR}/php.ini"
RUN docker-php-source extract
RUN for i in {{ php_modules|default(php_modules_default)|join(' ') }}; do \
    if [ "$(php -m|grep -w ${i}|wc -l)" -eq 0 ]; then \
      if [ -d "/usr/src/php/ext/${i}" ]; then \
        /usr/local/bin/docker-php-ext-install -j4 $i; else /usr/local/bin/pecl install $i; docker-php-ext-enable ${i%-*}; \
      fi; \
    fi; \
    done;
RUN rm -rf /tmp/pear
{% endif %}
{% endif %}

COPY ./build.sh /build.sh
RUN chmod +x /build.sh

WORKDIR /var/www
USER {{ ansible_user }}

{% if cache_dir is defined %}
RUN mkdir -p {{ cache_dir|regex_replace('.*\\:','') }}
{% endif %}

{% if tech in ['ruby'] %}
#Секция для технологий: ruby
ENV GEM_HOME {{ home_dir }}/.gem
ENV GEM_PATH {{ home_dir }}/.gem
ENV PATH $PATH':{{ home_dir }}/.gem/bin/'
{% endif %}
{% if tech == 'nodejs' %}
#Секция для технологии: nodejs
ENV NPM_CONFIG_LOGLEVEL info
RUN npm install -g gulp-cli
RUN npm install -g npm-cli-login
{% endif %}
{% if tech in ['python'] %}
ENV PATH "{{ home_dir }}/.local/bin:$PATH"
ENV ANSIBLE_DISPLAY_SKIPPED_HOSTS false
ENV PY_COLORS 1
ENV ANSIBLE_FORCE_COLOR 1
ENV OS_NAME {{ os_name }}
ENV LE_NET_GW {{ le_net_gw }}
ENV USER {{ ansible_user }}
{% endif %}