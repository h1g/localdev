docker-wrapper-{{ project_id }}   :=docker run --rm -v '/var/run/docker.sock:/var/run/docker.sock' -v '{{ work_dir }}:{{ work_dir }}' -e 'WORK_DIR={{ work_dir  }}'{% if  cache_dir is defined %} -v '{{ cache_dir }}' {% endif %} -v '{{ home_dir }}/.ssh:{{ home_dir }}/.ssh'
is-localdev := $(wildcard {{ sources_dir + '/localenv-dev' }})
ifneq ($(strip $(is-localdev)),)
docker-wrapper-{{ project_id }} +=-v '{{ sources_dir}}/localenv-dev:/ansible'
endif
ifdef SSH_AUTH_SOCK
docker-wrapper-{{ project_id }} +=-e SSH_AUTH_SOCK=/run/host-services/ssh-auth.sock -v '/run/host-services/ssh-auth.sock:/run/host-services/ssh-auth.sock'
endif

docker-wrapper-{{ project_id }} +=localenv

{{ project_id }}-images-pull:
	@$(docker-wrapper-{{ project_id }}) sudo docker-compose -f {{ infra_dir }}/docker-compose.yml pull
{{ project_id }}-up:
	@$(docker-wrapper-{{ project_id }}) sudo docker-compose -f {{ infra_dir }}/docker-compose.yml up -d
{{ project_id }}-down:
	@$(docker-wrapper-{{ project_id }}) sudo docker-compose -f {{ infra_dir }}/docker-compose.yml down
{{ project_id }}-restart:  {{ project_id }}-down  {{ project_id }}-up

{{ project_id }}-deploy:	{% if cache_dir is defined %}{{ project_id }}-cache-dir {% endif %}{{ project_id }}-deploy-render{% if tech != 'service' %}	{{ project_id }}-deploy-sources{% endif %}{% if configs %}	{{ project_id }}-deploy-configs{% endif %}	{{ project_id }}-deploy-build	{{ project_id }}-up
{{ project_id }}-bootstrap:	{% if cache_dir is defined %}{{ project_id }}-cache-dir {% endif %}{% if tech != 'service' %}	{{ project_id }}-deploy-sources{% endif %}{% if configs %}	{{ project_id }}-deploy-configs{% endif %}	{{ project_id }}-deploy-build	{{ project_id }}-up

{% if cache_dir is defined %}
{{ project_id }}-cache-dir:
	@mkdir -p {{ cache_dir|regex_replace('\\:.*','') }}
{% endif %}

{{ project_id }}-deploy-render:
	@$(docker-wrapper-{{ project_id }}) sudo docker-compose -f {{ infra_dir }}/docker-compose.yml ps -q|wc -l|grep -qv 0 && $(docker-wrapper-{{ project_id }}) sudo docker-compose -f {{ infra_dir }}/docker-compose.yml down --remove-orphans || true
	@$(docker-wrapper-{{ project_id }}) ansible-playbook -i inventory localenv.yml --extra-vars='project={{ project }} repo_name={{ repo_name }}'

{% if tech != 'service' %}
{{ project_id }}-deploy-sources:
ifneq ($(wildcard {{ source_dir + '/.git' }}),)
	@$(docker-wrapper-{{ project_id }}) git -C {{ source_dir }} pull origin {{ source_branch }}
	@$(docker-wrapper-{{ project_id }}) git -C {{ source_dir }} checkout {{ source_branch }}
else
	@git clone --branch {{ source_branch }} {{ source_repo }} {{ source_dir }}
endif
{% endif %}
{% if configs %}
{{ project_id }}-deploy-configs:	{{ project_id }}-deploy-configs-get	{{ project_id }}-deploy-configs-link
{{ project_id }}-deploy-configs-get:
ifneq ($(wildcard {{ config_dir + '/.git' }}),)
	@$(docker-wrapper-{{ project_id }}) git -C {{ config_dir }} pull origin {{ config_branch }}
	@$(docker-wrapper-{{ project_id }}) git -C {{ config_dir }} checkout {{ config_branch }}
else
	@git clone --branch {{ config_branch }} {{ config_repo }} {{ config_dir }}
endif
{{ project_id }}-deploy-configs-link:
	@$(docker-wrapper-{{ project_id }}) ansible-playbook -i inventory configs.yml --extra-vars='project={{ project }} repo_name={{ repo_name }} type=parent'
	@$(docker-wrapper-{{ project_id }}) ansible-playbook -i inventory configs.yml --extra-vars='project={{ project }} repo_name={{ repo_name }} type=current'
{% endif %}
{{ project_id }}-deploy-build:	{{ project_id }}-deploy-build-images{% if 'cli' in services %} {{ project_id }}-deploy-build-app{% endif %}

{{ project_id }}-deploy-build-images:
	@$(docker-wrapper-{{ project_id }}) sudo docker-compose -f {{ infra_dir }}/docker-compose.yml down
	@$(docker-wrapper-{{ project_id }}) sudo docker-compose -f {{ infra_dir }}/docker-compose.yml build

{% if 'cli' in services %}
{{ project_id }}-deploy-build-app:
	@$(docker-wrapper-{{ project_id }}) sudo docker-compose -f {{ infra_dir }}/docker-compose.yml up -d {{ project_id }}-cli
	@docker exec {{ project_id }}-cli /build.sh
	@$(docker-wrapper-{{ project_id }}) sudo docker-compose -f {{ infra_dir }}/docker-compose.yml up -d
{{ project_id }}-exec:
	@docker exec -ti {{ project_id }}-cli bash -l
{% endif %}
{% if 'redis' in services %}
{{ project_id }}-exec-redis-cli:
	@docker exec -ti {{ project_id }}-redis redis-cli
{% endif %}
{% if 'workers' in services %}
{{ project_id }}-exec-workers:
	@docker exec -ti {{ project_id }}-workers bash -l
{% endif %}
{% if 'runner' in services %}
{{ project_id }}-exec-runner:
	@docker exec -ti {{ project_id }}-runner bash -l
{% endif %}
{% if 'fpm' in services %}
{{ project_id }}-exec-fpm:
	@docker exec -ti {{ project_id }}-fpm bash -l
{% endif %}

{% for service in services if service in services_ports.keys() %}
{{ project_id }}-publish-{{ service }}:
	@sudo docker ps -q --filter "name=localenv-core-publish-{{ service }}" | grep -q . && docker stop localenv-core-publish-{{ service }} || true
	@sudo docker run -d --rm --name  localenv-core-publish-{{ service }} --publish 127.0.0.1:{{ services_ports[service] }}:{{ services_ports[service] }} --network=localenv alpine/socat tcp-listen:{{ services_ports[service] }},fork,reuseaddr tcp-connect:{{ project_id }}-{{ service }}:{{ services_ports[service] }}
{% endfor %}
