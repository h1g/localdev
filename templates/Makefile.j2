{% if project_name != 'localenv-dev' %}
ifeq (,$(shell docker inspect localenv-dev-cli |grep running))
{% endif %}
docker-wrapper-{{ project_name }}   :=docker run --rm -v '/var/run/docker.sock:/var/run/docker.sock' -v '{{ work_dir }}:{{ work_dir }}' -e 'PWD={{ work_dir  }}' -v '{{ home_dir }}/.ssh:{{ home_dir }}/.ssh'{% if  cache_dir is defined %} -v '{{ cache_dir }}' {% endif %}

ifdef SSH_AUTH_SOCK
docker-wrapper-{{ project_name }} +=-e SSH_AUTH_SOCK=${SSH_AUTH_SOCK} -e SSH_AGENT_PID=${SSH_AGENT_PID} -v '${SSH_AUTH_SOCK}:${SSH_AUTH_SOCK}'
endif
docker-wrapper-{{ project_name }} +=localenv

{% if project_name != 'localenv-dev' %}
else
export docker-wrapper-{{ project_name }} :=docker exec localenv-dev-cli
endif
{% endif %}

{{ project_name }}-images-pull:
	@$(docker-wrapper-{{ project_name }}) docker-compose -f {{ infra_dir }}/docker-compose.yml pull
{{ project_name }}-up:
	@$(docker-wrapper-{{ project_name }}) docker-compose -f {{ infra_dir }}/docker-compose.yml up -d
{{ project_name }}-down:
	@$(docker-wrapper-{{ project_name }}) docker-compose -f {{ infra_dir }}/docker-compose.yml down
{{ project_name }}-restart:  {{ project_name }}-down  {{ project_name }}-up

{{ project_name }}-deploy:	{% if cache_dir is defined %}{{ project_name }}-cache-dir {% endif %}{{ project_name }}-deploy-render{% if tech != 'service' %}	{{ project_name }}-deploy-sources{% endif %}{% if configs %}	{{ project_name }}-deploy-configs{% endif %}	{{ project_name }}-deploy-build	{{ project_name }}-up

{% if cache_dir is defined %}
{{ project_name }}-cache-dir:
	@mkdir -p {{ cache_dir|regex_replace('\\:.*','') }}
{% endif %}

{{ project_name }}-deploy-render:
	@$(docker-wrapper-{{ project_name }}) docker-compose -f {{ infra_dir }}/docker-compose.yml ps -q|wc -l|grep -qv 0 && $(docker-wrapper-{{ project_name }}) docker-compose -f {{ infra_dir }}/docker-compose.yml down --remove-orphans || true
	@$(docker-wrapper-{{ project_name }}) ansible-playbook -i {{ playbook_dir }}/inventory {{ playbook_dir }}/localenv.yml --extra-vars='project={{ project }} repo_name={{ repo_name }}'

{% if tech != 'service' %}
{{ project_name }}-deploy-sources:
ifneq ($(wildcard {{ source_dir + '/.git' }}),)
	@$(docker-wrapper-{{ project_name }}) git -C {{ source_dir }} pull origin {{ source_branch }}
	@$(docker-wrapper-{{ project_name }}) git -C {{ source_dir }} checkout {{ source_branch }}
else
	@$(docker-wrapper-{{ project_name }}) git clone --branch {{ source_branch }} {{ source_repo }} {{ source_dir }}
endif
{% endif %}
{% if configs %}
{{ project_name }}-deploy-configs:	{{ project_name }}-deploy-configs-get	{{ project_name }}-deploy-configs-link
{{ project_name }}-deploy-configs-get:
ifneq ($(wildcard {{ config_dir + '/.git' }}),)
	@$(docker-wrapper-{{ project_name }}) git -C {{ config_dir }} pull origin {{ config_branch }}
	@$(docker-wrapper-{{ project_name }}) git -C {{ config_dir }} checkout {{ config_branch }}
else
	@$(docker-wrapper-{{ project_name }}) git clone --branch {{ config_branch }} {{ config_repo }} {{ config_dir }}
endif
{{ project_name }}-deploy-configs-link:
	@$(docker-wrapper-{{ project_name }}) ansible-playbook -i {{ playbook_dir }}/inventory {{ playbook_dir }}/configs.yml --extra-vars='project={{ project }} repo_name={{ repo_name }} type=parent'
	@$(docker-wrapper-{{ project_name }}) ansible-playbook -i {{ playbook_dir }}/inventory {{ playbook_dir }}/configs.yml --extra-vars='project={{ project }} repo_name={{ repo_name }} type=current'
{% endif %}
{{ project_name }}-deploy-build:	{{ project_name }}-deploy-build-images{% if 'cli' in services %} {{ project_name }}-deploy-build-app{% endif %}

{{ project_name }}-deploy-build-images:
	@$(docker-wrapper-{{ project_name }}) docker-compose -f {{ infra_dir }}/docker-compose.yml down
	@$(docker-wrapper-{{ project_name }}) docker-compose -f {{ infra_dir }}/docker-compose.yml build

{% if 'cli' in services %}
{{ project_name }}-deploy-build-app:
	@$(docker-wrapper-{{ project_name }}) docker-compose -f {{ infra_dir }}/docker-compose.yml up -d {{ project_name }}-cli
	@docker exec {{ project_name }}-cli /build.sh
	@$(docker-wrapper-{{ project_name }}) docker-compose -f {{ infra_dir }}/docker-compose.yml up -d
{{ project_name }}-exec:
	@docker exec -ti {{ project_name }}-cli bash -l
{% endif %}
{% if 'redis' in services %}
{{ project_name }}-exec-redis-cli:
	@docker exec -ti {{ project_name }}-redis redis-cli
{% endif %}
{% if 'workers' in services %}
{{ project_name }}-exec-workers:
	@docker exec -ti {{ project_name }}-workers bash -l
{% endif %}
{% if 'runner' in services %}
{{ project_name }}-exec-runner:
	@docker exec -ti {{ project_name }}-runner bash -l
{% endif %}
{% if 'fpm' in services %}
{{ project_name }}-exec-fpm:
	@docker exec -ti {{ project_name }}-fpm bash -l
{% endif %}

{% for service in services if service in services_ports.keys() %}
{{ project_name }}-publish-{{ service }}:
	@docker ps -q --filter "name=localenv-core-publish-{{ service }}" | grep -q . && docker stop localenv-core-publish-{{ service }} || true
	@docker run -d --rm --name  localenv-core-publish-{{ service }} --publish {{ services_ports[service] }}:{{ services_ports[service] }} --network=localenv alpine/socat tcp-listen:{{ services_ports[service] }},fork,reuseaddr tcp-connect:{{ project_name }}-{{ service }}:{{ services_ports[service] }}
{% endfor %}
